on_actions = {
	on_daily = {
		effect = {
			every_country = {
				if = {
					limit = {
						is_ai = no
						num_of_available_civilian_factories > 0
						check_variable = { send_fuel_enabled > 1 }
					}

					### =========
					### RUBBER
					### =========
					if = {
						limit = { check_variable = { resource@rubber < 0 } }

						# import_needed = (- resource@rubber) + current_imports
						set_temp_variable = { import_needed = -1 }
						multiply_temp_variable = { import_needed = resource@rubber }
						add_to_temp_variable = { import_needed = resource_imported@rubber }

						# Equal-priority list (flat_scorer): just takes first valid exporter.
						get_sorted_scored_countries_temp = {
							scorer = flat_scorer
							array = tags
							scores = resources
						}

						for_each_loop = {
							array = tags
							value = trader
							break = break

							# stop once we’ve covered the deficit
							if = {
								limit = { check_variable = { import_needed < 1 } }
								set_temp_variable = { break = 1 }
							}
							else = {
								# skip self
								if = {
									limit = {
										NOT = { check_variable = { trader = FROM } }
									}
									# skip exporters that also have a deficit in this resource (avoid mutual blocking)
									if = {
										limit = {
											NOT = {
												var:trader = { check_variable = { resource@rubber < 0 } }
											}
										}
										# evaluate exporter available amount
										set_temp_variable = { export_max = 0 }
										var:trader = {
											add_to_temp_variable = { export_max = resource_exported@rubber }
										}

										# choose minimal feasible amount
										if = {
											limit = { check_variable = { export_max < import_needed } }
											set_temp_variable = { traded_resources = export_max }
										}
										else = {
											set_temp_variable = { traded_resources = import_needed }
										}

										# dynamic delivery check: only count if resource_imported actually increases
										set_temp_variable = { prev_imported = resource_imported@rubber }

										meta_effect = {
											text = {
												create_import = {
													resource = rubber
													amount = [AMOUNT]
													exporter = [EXPORTER]
												}
											}
											AMOUNT = "[?traded_resources]"
											EXPORTER = "[?trader.GetTag]"
										}

										set_temp_variable = { new_imported = resource_imported@rubber }
										if = {
											limit = { check_variable = { new_imported > prev_imported } }
											subtract_from_temp_variable = { import_needed = traded_resources }
										}
										# else: trade didn’t land (blocked/ineffective). Do not subtract – try next trader.
									}
								}
							}
						}
					}

					### =============
					### ALUMINIUM
					### =============
					if = {
						limit = { check_variable = { resource@aluminium < 0 } }

						set_temp_variable = { import_needed = -1 }
						multiply_temp_variable = { import_needed = resource@aluminium }
						add_to_temp_variable = { import_needed = resource_imported@aluminium }

						get_sorted_scored_countries_temp = {
							scorer = flat_scorer
							array = tags
							scores = resources
						}

						for_each_loop = {
							array = tags
							value = trader
							break = break

							if = {
								limit = { check_variable = { import_needed < 1 } }
								set_temp_variable = { break = 1 }
							}
							else = {
								if = {
									limit = {
										NOT = { check_variable = { trader = FROM } }
									}
									if = {
										limit = {
											NOT = { var:trader = { check_variable = { resource@aluminium < 0 } } }
										}
										set_temp_variable = { export_max = 0 }
										var:trader = {
											add_to_temp_variable = { export_max = resource_exported@aluminium }
										}

										if = {
											limit = { check_variable = { export_max < import_needed } }
											set_temp_variable = { traded_resources = export_max }
										}
										else = {
											set_temp_variable = { traded_resources = import_needed }
										}

										set_temp_variable = { prev_imported = resource_imported@aluminium }
										meta_effect = {
											text = {
												create_import = {
													resource = aluminium
													amount = [AMOUNT]
													exporter = [EXPORTER]
												}
											}
											AMOUNT = "[?traded_resources]"
											EXPORTER = "[?trader.GetTag]"
										}
										set_temp_variable = { new_imported = resource_imported@aluminium }
										if = {
											limit = { check_variable = { new_imported > prev_imported } }
											subtract_from_temp_variable = { import_needed = traded_resources }
										}
									}
								}
							}
						}
					}

					### =============
					### TUNGSTEN
					### =============
					if = {
						limit = { check_variable = { resource@tungsten < 0 } }

						set_temp_variable = { import_needed = -1 }
						multiply_temp_variable = { import_needed = resource@tungsten }
						add_to_temp_variable = { import_needed = resource_imported@tungsten }

						get_sorted_scored_countries_temp = {
							scorer = flat_scorer
							array = tags
							scores = resources
						}

						for_each_loop = {
							array = tags
							value = trader
							break = break

							if = {
								limit = { check_variable = { import_needed < 1 } }
								set_temp_variable = { break = 1 }
							}
							else = {
								if = {
									limit = {
										NOT = { check_variable = { trader = FROM } }
									}
									if = {
										limit = {
											NOT = { var:trader = { check_variable = { resource@tungsten < 0 } } }
										}
										set_temp_variable = { export_max = 0 }
										var:trader = {
											add_to_temp_variable = { export_max = resource_exported@tungsten }
										}

										if = {
											limit = { check_variable = { export_max < import_needed } }
											set_temp_variable = { traded_resources = export_max }
										}
										else = {
											set_temp_variable = { traded_resources = import_needed }
										}

										set_temp_variable = { prev_imported = resource_imported@tungsten }
										meta_effect = {
											text = {
												create_import = {
													resource = tungsten
													amount = [AMOUNT]
													exporter = [EXPORTER]
												}
											}
											AMOUNT = "[?traded_resources]"
											EXPORTER = "[?trader.GetTag]"
										}
										set_temp_variable = { new_imported = resource_imported@tungsten }
										if = {
											limit = { check_variable = { new_imported > prev_imported } }
											subtract_from_temp_variable = { import_needed = traded_resources }
										}
									}
								}
							}
						}
					}

					### =========
					### STEEL
					### =========
					if = {
						limit = { check_variable = { resource@steel < 0 } }

						set_temp_variable = { import_needed = -1 }
						multiply_temp_variable = { import_needed = resource@steel }
						add_to_temp_variable = { import_needed = resource_imported@steel }

						get_sorted_scored_countries_temp = {
							scorer = flat_scorer
							array = tags
							scores = resources
						}

						for_each_loop = {
							array = tags
							value = trader
							break = break

							if = {
								limit = { check_variable = { import_needed < 1 } }
								set_temp_variable = { break = 1 }
							}
							else = {
								if = {
									limit = {
										NOT = { check_variable = { trader = FROM } }
									}
									if = {
										limit = {
											NOT = { var:trader = { check_variable = { resource@steel < 0 } } }
										}
										set_temp_variable = { export_max = 0 }
										var:trader = {
											add_to_temp_variable = { export_max = resource_exported@steel }
										}

										if = {
											limit = { check_variable = { export_max < import_needed } }
											set_temp_variable = { traded_resources = export_max }
										}
										else = {
											set_temp_variable = { traded_resources = import_needed }
										}

										set_temp_variable = { prev_imported = resource_imported@steel }
										meta_effect = {
											text = {
												create_import = {
													resource = steel
													amount = [AMOUNT]
													exporter = [EXPORTER]
												}
											}
											AMOUNT = "[?traded_resources]"
											EXPORTER = "[?trader.GetTag]"
										}
										set_temp_variable = { new_imported = resource_imported@steel }
										if = {
											limit = { check_variable = { new_imported > prev_imported } }
											subtract_from_temp_variable = { import_needed = traded_resources }
										}
									}
								}
							}
						}
					}

					### =============
					### CHROMIUM
					### =============
					if = {
						limit = { check_variable = { resource@chromium < 0 } }

						set_temp_variable = { import_needed = -1 }
						multiply_temp_variable = { import_needed = resource@chromium }
						add_to_temp_variable = { import_needed = resource_imported@chromium }

						get_sorted_scored_countries_temp = {
							scorer = flat_scorer
							array = tags
							scores = resources
						}

						for_each_loop = {
							array = tags
							value = trader
							break = break

							if = {
								limit = { check_variable = { import_needed < 1 } }
								set_temp_variable = { break = 1 }
							}
							else = {
								if = {
									limit = {
										NOT = { check_variable = { trader = FROM } }
									}
									if = {
										limit = {
											NOT = { var:trader = { check_variable = { resource@chromium < 0 } } }
										}
										set_temp_variable = { export_max = 0 }
										var:trader = {
											add_to_temp_variable = { export_max = resource_exported@chromium }
										}

										if = {
											limit = { check_variable = { export_max < import_needed } }
											set_temp_variable = { traded_resources = export_max }
										}
										else = {
											set_temp_variable = { traded_resources = import_needed }
										}

										set_temp_variable = { prev_imported = resource_imported@chromium }
										meta_effect = {
											text = {
												create_import = {
													resource = chromium
													amount = [AMOUNT]
													exporter = [EXPORTER]
												}
											}
											AMOUNT = "[?traded_resources]"
											EXPORTER = "[?trader.GetTag]"
										}
										set_temp_variable = { new_imported = resource_imported@chromium }
										if = {
											limit = { check_variable = { new_imported > prev_imported } }
											subtract_from_temp_variable = { import_needed = traded_resources }
										}
									}
								}
							}
						}
					}
					# NOTE: FUEL is handled by HOI4 differently (from oil, refinery output, and conversion).
					# If you want the same logic for OIL as a traded resource, duplicate a block with resource@oil etc.
				}
			}
		}
	}

	on_weekly = {
		effect = {
			every_country = {
				if = {
					limit = {
						is_ai = no
						num_of_available_civilian_factories > 0
						check_variable = { send_fuel_enabled > 1 }
					}

					# Weekly cleanup: if no longer in deficit, cancel all imports for that resource.
					# This prevents lingering/wasted factory allocations.

					# RUBBER
					if = {
						limit = {
							check_variable = { resource@rubber >= 0 }
							check_variable = { resource_imported@rubber > 0 }
						}
						get_sorted_scored_countries_temp = {
							scorer = flat_scorer
							array = tags
							scores = resources
						}
						for_each_loop = {
							array = tags
							value = trader
							break = break
							meta_effect = {
								text = {
									create_import = {
										resource = rubber
										amount = 0
										exporter = [EXPORTER]
									}
								}
								EXPORTER = "[?trader.GetTag]"
							}
						}
					}

					# ALUMINIUM
					if = {
						limit = {
							check_variable = { resource@aluminium >= 0 }
							check_variable = { resource_imported@aluminium > 0 }
						}
						get_sorted_scored_countries_temp = {
							scorer = flat_scorer
							array = tags
							scores = resources
						}
						for_each_loop = {
							array = tags
							value = trader
							break = break
							meta_effect = {
								text = {
									create_import = {
										resource = aluminium
										amount = 0
										exporter = [EXPORTER]
									}
								}
								EXPORTER = "[?trader.GetTag]"
							}
						}
					}

					# TUNGSTEN
					if = {
						limit = {
							check_variable = { resource@tungsten >= 0 }
							check_variable = { resource_imported@tungsten > 0 }
						}
						get_sorted_scored_countries_temp = {
							scorer = flat_scorer
							array = tags
							scores = resources
						}
						for_each_loop = {
							array = tags
							value = trader
							break = break
							meta_effect = {
								text = {
									create_import = {
										resource = tungsten
										amount = 0
										exporter = [EXPORTER]
									}
								}
								EXPORTER = "[?trader.GetTag]"
							}
						}
					}

					# STEEL
					if = {
						limit = {
							check_variable = { resource@steel >= 0 }
							check_variable = { resource_imported@steel > 0 }
						}
						get_sorted_scored_countries_temp = {
							scorer = flat_scorer
							array = tags
							scores = resources
						}
						for_each_loop = {
							array = tags
							value = trader
							break = break
							meta_effect = {
								text = {
									create_import = {
										resource = steel
										amount = 0
										exporter = [EXPORTER]
									}
								}
								EXPORTER = "[?trader.GetTag]"
							}
						}
					}

					# CHROMIUM
					if = {
						limit = {
							check_variable = { resource@chromium >= 0 }
							check_variable = { resource_imported@chromium > 0 }
						}
						get_sorted_scored_countries_temp = {
							scorer = flat_scorer
							array = tags
							scores = resources
						}
						for_each_loop = {
							array = tags
							value = trader
							break = break
							meta_effect = {
								text = {
									create_import = {
										resource = chromium
										amount = 0
										exporter = [EXPORTER]
									}
								}
								EXPORTER = "[?trader.GetTag]"
							}
						}
					}
				}
			}
		}
	}
}

### =========================================================
###  FLAT SCORER — equal priority for all countries/tags
###  (kept separate so you can swap in a GUI-based scorer later)
### =========================================================
